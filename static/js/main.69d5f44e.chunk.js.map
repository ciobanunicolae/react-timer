{"version":3,"sources":["components/pomodoro/index.tsx","components/controls/index.tsx","components/shortcuts/index.tsx","utils/index.tsx","components/time-display/index.tsx","components/type-select/index.tsx","styled/style.tsx","App.tsx","index.tsx"],"names":["props","types","name","time","Pomodoro","useState","selectedType","setSelectedType","setTime","running","setRunning","int","setInt","useEffect","document","addEventListener","handleKeyUp","Notification","requestPermission","removeEventListener","event","key","length","changeType","type","resetTimer","tick","stopInterval","navigator","serviceWorker","register","then","sw","showNotification","e","console","log","clearInterval","startTimer","setInterval","getStatus","PomodoroContent","TypeSelect","selected","status","progress","Controls","start","reset","pause","Shortcuts","React","statusText","ControlsButton","onClick","className","shortcutsList","Icon","ShortcutsBox","map","shortcut","index","Shortcut","addZero","num","formatTime","minutes","Math","floor","seconds","TimeDisplay","title","radius","circumference","normalizedRadius","PI","strokeDashoffset","width","viewBox","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","Time","Status","Button","styled","div","button","h1","p","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.69d5f44e.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport { start } from \"repl\";\r\nimport { Controls } from \"../\";\r\nimport { Shortcuts } from \"../\";\r\nimport { TypeSelect } from \"../\";\r\nimport { TimeDisplay } from \"../\";\r\nimport { SC } from \"../\";\r\n\r\nconst props =   {\r\n    types: [\r\n        { name: \"Pomodoro\", time: 1500 },\r\n        { name: \"Short Break\", time: 300 },\r\n        { name: \"Long Break\", time: 900 },\r\n    ]\r\n}\r\n\r\nexport const Pomodoro = () => {\r\n\r\n    const [selectedType, setSelectedType] = useState(props.types[0]);\r\n    const [time, setTime] = useState(props.types[0].time);\r\n    const [running, setRunning] = useState(false);\r\n    const [int, setInt]: any = useState(null);//interval\r\n    useEffect(() => {\r\n        document.addEventListener(\"keyup\", handleKeyUp);\r\n        Notification.requestPermission();\r\n        return () => {\r\n            document.removeEventListener(\"keyup\", handleKeyUp);\r\n        }\r\n    },[])\r\n    const handleKeyUp = (event): void => {\r\n        //Handling number shortcuts\r\n        if (event.key >= 1 && event.key <= props.types.length) {\r\n            changeType(props.types[event.key - 1]);\r\n        }\r\n    };\r\n    const changeType = ( type ): void => {\r\n        resetTimer();\r\n        setSelectedType(type);\r\n        setTime(type.time);\r\n        setRunning(false);\r\n    }\r\n    const tick = () : void => {\r\n        if (time <= 1) {\r\n            stopInterval();\r\n            setRunning(false);\r\n            try {\r\n                navigator.serviceWorker.register(\"service-worker.js\").then(sw => {\r\n                    sw.showNotification(`${selectedType.name} finished!`);\r\n                })\r\n            }\r\n            catch (e) {\r\n                console.log(\"Notification error\", e);\r\n            }\r\n        }\r\n        setTime(time=>time - 1);\r\n    }\r\n    const stopInterval = (): void => {\r\n        clearInterval(int);\r\n        setInt(null);\r\n    }\r\n    const startTimer = (): void => {\r\n        setRunning(true);\r\n        setInt(setInterval(tick ,1000));\r\n        setTime(time > 0 ? time : selectedType.time);\r\n    }\r\n    const resetTimer = (): void => {\r\n        stopInterval();\r\n        setTime(selectedType.time);\r\n        setRunning(false);\r\n    }\r\n    const pauseTimer = (): void => {\r\n        int ? stopInterval() : startTimer();\r\n    }\r\n    const getStatus = () : any => {\r\n        if (time === 0) return \"Finished\";\r\n        if (running && !int) return \"Paused\";\r\n        if (running) return \"Running\";\r\n    }\r\n    const getProgress = (): number => {\r\n        return ((selectedType.time - time) / selectedType.time) * 100;\r\n    }\r\n    return (\r\n        <SC.PomodoroContent>\r\n            <SC.Pomodoro>\r\n                    <TypeSelect\r\n                        types={props.types}\r\n                        selected={selectedType}\r\n                        changeType={changeType}\r\n                    />\r\n                    <TimeDisplay\r\n                        time={time}\r\n                        status={getStatus()}\r\n                        progress={getProgress()}\r\n                    />\r\n                    <Controls\r\n                        start={startTimer}\r\n                        reset={resetTimer}\r\n                        pause={pauseTimer}\r\n                        status={getStatus()}\r\n                    />\r\n                    <Shortcuts />\r\n            </SC.Pomodoro>\r\n        </SC.PomodoroContent>\r\n    )\r\n}\r\n    \r\n","import * as React from \"react\";\r\nimport { SC } from \"../\";\r\n\r\ninterface ControlProps  {\r\n    start: Function;\r\n    reset: Function;\r\n    pause: Function;\r\n    status: any;\r\n}\r\n\r\nexport const Controls = React.memo(({ start, reset, pause, status }: ControlProps) => {\r\n    //Added this array of strings to fix >\r\n    //\"This condition will always return 'false' since the types have no overlap\" on line 34\r\n    const statusText= [\"Running\", \"Paused\", \"Resume\", \"Finished\"];\r\n    return(\r\n        <SC.Controls>\r\n            {!status && (\r\n                <SC.ControlsButton onClick={()=>start()} className=\"start\">\r\n                    Start Timer\r\n                </SC.ControlsButton>\r\n            )}\r\n            {status === statusText[3] && (\r\n                <SC.ControlsButton onClick={()=>start()} className=\"start\">\r\n                    Restart Timer\r\n                </SC.ControlsButton>\r\n            )}\r\n            {(status === statusText[1] || status === statusText[0]) && (\r\n                <div>\r\n                    <SC.ControlsButton onClick={()=>reset()} className=\"reset\">\r\n                        Reset\r\n                    </SC.ControlsButton>\r\n                    <SC.ControlsButton\r\n                        onClick={() => pause()}\r\n                        className={status=== statusText[1]? \"resume\" : \"pause\"}\r\n                    >\r\n                        {status === statusText[1] ? statusText[2] : \"Pause\"}\r\n                    </SC.ControlsButton>\r\n                </div>\r\n            )}\r\n        </SC.Controls>\r\n    )\r\n})","import * as React from \"react\";\r\nimport { SC } from \"../\";\r\nimport { FaKeyboard } from \"react-icons/fa\"\r\n\r\nconst shortcutsList: { name: string, key: string }[] = [\r\n    {\"name\": \"Pomodoro\", \"key\": \"1\"},\r\n    {\"name\": \"Short Break\", \"key\": \"2\"},\r\n    {\"name\": \"Long Break\", \"key\": \"3\"}\r\n]\r\nexport const Shortcuts = React.memo(() =>\r\n    <SC.Shortcuts>\r\n        <SC.Icon>\r\n            <FaKeyboard />\r\n        </SC.Icon>\r\n        <SC.ShortcutsBox className=\"box\">\r\n            {shortcutsList.map((shortcut, index) =>\r\n                <SC.Shortcut key={index}>\r\n                    <div>{shortcut.name}</div>\r\n                    <div>\r\n                        <kbd>{shortcut.key}</kbd>\r\n                    </div>\r\n                </SC.Shortcut>\r\n            )}\r\n        </SC.ShortcutsBox>\r\n    </SC.Shortcuts>\r\n)     ","const addZero = (num: number) => {\r\n    return num > 9 ? num : `0${num}`;\r\n}\r\nexport const formatTime = (time: number) => {\r\n    const minutes = addZero(Math.floor(time / 60));\r\n    const seconds = addZero(Math.floor(time % 60));\r\n\r\n    return `${minutes}:${seconds}`;\r\n}","import * as React from \"react\";\r\nimport {SC}from \"../\";\r\nimport { formatTime } from \"../../utils\";\r\n\r\ninterface TimeDisplayProps  {\r\n    time: number;\r\n    status: string;\r\n    progress: number;\r\n}\r\n\r\nexport const TimeDisplay = ({ time, status, progress }: TimeDisplayProps) => {\r\n    \r\n    document.title = `(${formatTime(time)}) Pomodoro`;\r\n    const radius = 150;\r\n    const stroke = 5;\r\n    const normalizedRadius = radius - stroke * 2;\r\n    const circumference = normalizedRadius * 2 * Math.PI;\r\n    const strokeDashoffset = circumference - (progress / 100) * circumference;\r\n\r\n    return (\r\n        <SC.TimeDisplay>\r\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n                <circle\r\n                    stroke=\"#ddd\"\r\n                    fill=\"#fff\"\r\n                    strokeWidth={stroke}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n                <circle\r\n                    stroke=\"#D9534F\"\r\n                    fill=\"transparent\"\r\n                    strokeWidth={stroke}\r\n                    strokeDasharray={circumference + ' ' + circumference}\r\n                    style={{ strokeDashoffset }}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n            </svg>\r\n            <div>\r\n                <SC.Time>{formatTime(time)}</SC.Time>\r\n                <SC.Status>{status}</SC.Status>\r\n            </div>\r\n        </SC.TimeDisplay>\r\n    )\r\n}","import * as React from \"react\";\r\nimport { SC } from \"../\";\r\n\r\ninterface TypeSelectProps  {\r\n    types: {\r\n        name: string;\r\n        time: number;\r\n    }[];\r\n    changeType: Function;\r\n    selected: {\r\n        name: string;\r\n        time: number;\r\n    }\r\n}\r\n\r\nexport const TypeSelect = React.memo(({types, changeType, selected,}: TypeSelectProps) =>\r\n    <SC.TypeSelect>\r\n        {types.map((type) => \r\n            <SC.Button\r\n                key={type.name}\r\n                onClick={() => changeType(type)}\r\n                className={type.name === selected.name? \"active\" : \"\" }\r\n            >\r\n                {type.name}\r\n            </SC.Button>\r\n        )}\r\n    </SC.TypeSelect>\r\n)","import styled from \"styled-components\";\r\n\r\nexport const Controls = styled.div`\r\n    width: 250px;\r\n    display: flex;\r\n    justify-content: center;\r\n    div{\r\n        width: 250px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    .start{\r\n        background: #D9534F;\r\n        color: #fff;\r\n        &:hover{\r\n            background: #b64441;\r\n        }   \r\n    }\r\n    .reset{\r\n        background: transparent;\r\n        flex: 0;\r\n        margin-right: 25px;\r\n        color: #888;\r\n        &:hover{\r\n            color: #666;\r\n        }\r\n    }\r\n    .pause{\r\n        background: #eea73c;\r\n        color: #fff;\r\n        &:hover{\r\n            background: #d3912f;\r\n        }\r\n    }\r\n    .resume{\r\n        background: #91b62d;\r\n        color: #fff;\r\n        &:hover{\r\n            background: #7d9e23;\r\n        }\r\n    }\r\n`\r\nexport const ControlsButton = styled.button`\r\n    height: 40px;\r\n    border-radius: 40px;\r\n    border: 0;\r\n    flex: 1;\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-family: 'Roboto', sans-serif;\r\n    font-weight: bold;\r\n    font-size: 14px;\r\n    letter-spacing: 1px;\r\n    position: relative;\r\n    outline: 0;\r\n    transition: all .3s;\r\n    padding: 0;\r\n    \r\n`\r\nexport const Button = styled.button`\r\n    flex: 1;\r\n    border: 2px solid #ccc;\r\n    border-right: 0;\r\n    background: transparent;\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 14px;\r\n    padding: 10px;\r\n    color: #999;\r\n    outline: 0;\r\n    transition: all .3s;\r\n    cursor: pointer;\r\n    \r\n`\r\nexport const Shortcuts = styled.div`\r\n    position: absolute;\r\n    width: 27px;\r\n    height: 24px;\r\n    right: 70px;\r\n    top: 25px;\r\n    @media screen and (max-width: 768px){\r\n        display: none;\r\n    }\r\n    &:hover{\r\n        .box{\r\n            opacity: 1;\r\n            visibility: visible;\r\n        }\r\n    }\r\n`\r\nexport const ShortcutsBox = styled.div`\r\n    position: absolute;\r\n    top: 34px;\r\n    right: 0;\r\n    width: 300px;\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    border: 1px solid #ddd;\r\n    box-shadow: 0 1px 4px rgba(0, 0, 0, .07);\r\n    padding: 25px;\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    transition: opacity .3s;\r\n    \r\n`\r\nexport const Shortcut = styled.div`\r\n    display: flex;\r\n    border-bottom: 1px solid #eee;\r\n    padding: 10px 0;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 13px;\r\n    color: #666;\r\n    &:first-child{\r\n        padding-top: 0;\r\n    }\r\n    &:last-child{\r\n        border-bottom: 0;\r\n        padding-bottom: 0;\r\n    }\r\n    div{\r\n        white-space: nowrap;\r\n    }\r\n    kbd{\r\n        display: inline-block;\r\n        font-family: monospace;\r\n        background-color: #f4f4f4;\r\n        border: 1px solid #ccc;\r\n        border-radius: 3px;\r\n        box-shadow: 0 1px 0 rgba(0,0,0,.1), inset 0 0 0 1px #fff;\r\n        color: #333;\r\n        font-size: 11px;\r\n        margin: 0 .15em;\r\n        padding: .25em .7em;\r\n        white-space: nowrap;\r\n    }\r\n    &:hover{\r\n        opacity: 1;\r\n        visibility: visible;\r\n    }\r\n\r\n`\r\nexport const Icon = styled.div`\r\n    font-size: 24px;\r\n    color: #666;\r\n    opacity: .5;\r\n    transition: all .3s;\r\n    &:hover{\r\n        opacity: 1;\r\n    }\r\n`\r\nexport const TimeDisplay = styled.div`\r\n    position: relative;\r\n    svg{\r\n        max-width: 300px;\r\n    }\r\n    circle{\r\n        transition: stroke-dashoffset 1s;\r\n        transform: rotate(-90deg);\r\n        transform-origin: 50% 50%;\r\n    }\r\n    div{\r\n        position: absolute;\r\n        left: 50%;\r\n        top: 50%;\r\n        transform: translate(-50%, -32px);\r\n        text-align: center;\r\n    }\r\n\r\n`\r\nexport const Time = styled.h1`\r\n    font-size: 52px;\r\n    font-weight: 300;\r\n    color: #D9534F;\r\n    letter-spacing: 2px;\r\n    margin: 0;\r\n`\r\nexport const Status = styled.p`\r\n    font-size: 14px;\r\n    text-transform: uppercase;\r\n    color: #bbb;\r\n    letter-spacing: 3px;\r\n    margin: 10px 0 0;\r\n`\r\nexport const TypeSelect = styled.div`\r\n    width: 400px;\r\n    display: flex;\r\n    @media screen and (max-width: 500px) {\r\n        width: 100%;\r\n    }\r\n    .active{\r\n        background: #fff;\r\n        color: #D9534F;\r\n        box-shadow: 0 3px 10px rgba(0, 0, 0, .12);\r\n    }\r\n    button:last-child{\r\n        border-right: 2px solid #ccc;\r\n    }\r\n`\r\nexport const PomodoroContent = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    text-align: center;\r\n    @media (max-width: 1000px) {\r\n        flex-direction: column;\r\n    }\r\n`\r\nexport const Pomodoro = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    min-height: 600px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 80px 0;\r\n`","import * as React from \"react\";\nimport { SC } from \"./styled\";\nimport {Pomodoro} from \"./components\";\n\nexport const App = () => \n    <div className=\"App\">\n        <Pomodoro/> \n    </div>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}